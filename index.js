require("dotenv").config();
const {
  Bot,
  GrammyError,
  HttpError,
  Keyboard,
  InlineKeyboard,
} = require("grammy");

const { hydrate } = require("@grammyjs/hydrate");

const bot = new Bot(process.env.BOT_API_KEY);
bot.use(hydrate());

// ------------------------ //
// –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
bot.api.setMyCommands([
  {
    command: "start",
    description: "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
  },
  {
    command: "mood",
    description: "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
  },
  {
    command: "share",
    description: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–ª—è —Å–≤–∞—Ç–∞",
  },
  {
    command: "inline_keyboard",
    description: "–ò–Ω–ª–∞–π–Ω –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞",
  },
  {
    command: "telegram",
    description: "–ù–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º",
  },
  {
    command: "menu",
    description: "–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é",
  },
]);
// –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
// ------------------------ //

// ------------------------ //
// –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
bot.command("start", async (ctx) => {
  await ctx.react("üëç");
  await ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç Dohi.  –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à Telegram –∫–∞–Ω–∞–ª <a href="https://t.me/deemtme"> –î—ç—ç–º </a>',
    {
      parse_mode: "HTML",
      disable_web_page_preview: true,
    }
  );
});
// –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
// ------------------------ //

// ------------------------ //
// –ö–∞—Å—Ç–æ–º –∫–ª–∞–≤–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ (–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ)
bot.command("mood", async (ctx) => {
  const moodKeyboard = new Keyboard()
    .text("–•–æ—Ä–æ—à–æ")
    .row()
    .text("–ù–æ—Ä–º")
    .text("–ü–ª–æ—Ö–æ")
    .placeholder("–ü–æ–¥–µ–ª–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º")
    .resized();
  await ctx.reply("–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?", {
    reply_markup: moodKeyboard,
  });
});
// –ö–∞—Å—Ç–æ–º –∫–ª–∞–≤–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ (–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ)

// –û—Ç–≤–µ—Ç—ã –∫ –≤–æ–ø—Ä–æ—Å–∞–º (–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ)
bot.hears("–•–æ—Ä–æ—à–æ", async (ctx) => {
  await ctx.reply("–ö–ª–∞—Å—Å");
});
bot.hears("–ù–æ—Ä–º", async (ctx) => {
  await ctx.reply("–û—Ç–ª–∏—á–Ω–æ");
});
bot.hears("–ü–ª–æ—Ö–æ", async (ctx) => {
  await ctx.reply("–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?");
});
// –û—Ç–≤–µ—Ç—ã –∫ –≤–æ–ø—Ä–æ—Å–∞–º (–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ)
// ------------------------ //

// ------------------------ //
// –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ö–æ–Ω—Ç–∞–∫—Ç –û–ø—Ä–æ—Å
bot.command("share", async (ctx) => {
  const shareKeyboard = new Keyboard()
    .requestLocation("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è")
    .requestContact("–ö–æ–Ω—Ç–∞–∫—Ç")
    .requestPoll("–û–ø—Ä–æ—Å")
    .placeholder("–¢–æ—á–Ω–æ —Ö–æ—á–µ—à—å —Å–≤–∞—Ç–∞?")
    .resized();
  await ctx.reply("–ß–µ–º –ø–æ–¥–µ–ª–∏—à—å—Å—è —á—Ç–æ–±—ã —Ç–µ–±—è –∑–∞–¥–æ–∫—Å–∏–ª–∏?", {
    reply_markup: shareKeyboard,
  });
});
// –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ö–æ–Ω—Ç–∞–∫—Ç –û–ø—Ä–æ—Å

// –û—Ç–≤–µ—Ç—ã –∫ (–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ö–æ–Ω—Ç–∞–∫—Ç –û–ø—Ä–æ—Å)
bot.on(":location", async (ctx) => {
  await ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –∂–¥–∏ —Å–≤–∞—Ç–∞");
});
bot.on(":contact", async (ctx) => {
  await ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç, —Ç–µ–ø–µ—Ä—å —Ç–µ–±–µ —Ç–æ—á–Ω–æ –ø–∏–∑–¥–∞ ^_^");
});
bot.on(":poll", async (ctx) => {
  await ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–ø—Ä–æ—Å");
});
// –û—Ç–≤–µ—Ç—ã –∫ (–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ö–æ–Ω—Ç–∞–∫—Ç –û–ø—Ä–æ—Å)
// ------------------------ //

// ------------------------ //
// –í—ã–±–æ—Ä –∫–Ω–æ–ø–æ–∫ (1, 2, 3)
bot.command("inline_keyboard", async (ctx) => {
  const inlineKeyboard = new InlineKeyboard()
    .text("–ü–æ–¥–∞—Ä–æ–∫ –ø–∞—Å—Ö–∞–ª–∫–∞", "button-1")
    .row()
    .text("–ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ –ø—Ä–∞–≤–∞", "button-2")
    .row()
    .text("–ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é", "button-3");

  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É", {
    reply_markup: inlineKeyboard,
  });
});
// –í—ã–±–æ—Ä –∫–Ω–æ–ø–æ–∫ (button-1, button-2, button-3)

// –û—Ç–≤–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ü—ã—Ñ—Ä—É
bot.callbackQuery("button-1", async (ctx) => {
  await ctx.answerCallbackQuery("1488 –ì–ò–¢–õ–ï–† –ë–´–õ –ü–†–ê–í");
  await ctx.reply("1488 –ü–ê–°–•–ê–õ–ö–ê");
});
bot.callbackQuery("button-2", async (ctx) => {
  await ctx.answerCallbackQuery("1488 –ì–ò–¢–õ–ï–† –ë–´–õ –ü–†–ê–í");
  await ctx.reply("–ì–ò–¢–õ–ï–† –ë–´–õ –ü–†–ê–í");
});
bot.callbackQuery("button-3", async (ctx) => {
  await ctx.answerCallbackQuery("1488 –ì–ò–¢–õ–ï–† –ë–´–õ –ü–†–ê–í");
  await ctx.reply("–¢–´ –ì–ï–ô");
});
// –û—Ç–≤–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ü—ã—Ñ—Ä—É
// ------------------------ //

// ------------------------ //
// –ö–Ω–æ–ø–∫–∞ –Ω–∞ –¢–µ–ª–µ–≥—Ä–∞–º–º
bot.command("telegram", async (ctx) => {
  const telergamKeyboard = new InlineKeyboard()
    .url("–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–≥-–∫–∞–Ω–∞–ª", "https://t.me/deemtme")
    .row();
  await ctx.reply("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É", {
    reply_markup: telergamKeyboard,
  });
});
// –ö–Ω–æ–ø–∫–∞ –Ω–∞ –¢–µ–ª–µ–≥—Ä–∞–º–º
// ------------------------ //

// ------------------------ //
// –ú–µ–Ω—é Support and Status
const menuKeyboard = new InlineKeyboard()
  .text("–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", "order-status")
  .text("–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", "support");
const backKeyboard = new InlineKeyboard().text("<<–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é.", "back");

bot.command("menu", async (ctx) => {
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", {
    reply_markup: menuKeyboard,
  });
});
// –ú–µ–Ω—é Support and Status
// ------------------------ //

// ------------------------ //
// –û—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã  (–ú–µ–Ω—é Support and Status)
bot.callbackQuery("order-status", async (ctx) => {
  await ctx.callbackQuery.message.editText("–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑: –≤ –ø—É—Ç–∏", {
    reply_markup: backKeyboard,
  });
  await ctx.answerCallbackQuery("–ì–∏—Ç–ª–µ—Ä –ø—Ä–∞–≤");
});

bot.callbackQuery("support", async (ctx) => {
  await ctx.callbackQuery.message.editText("–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.", {
    reply_markup: backKeyboard,
  });
  await ctx.answerCallbackQuery("–ì–∏—Ç–ª–µ—Ä –ø—Ä–∞–≤");
});

bot.callbackQuery("back", async (ctx) => {
  await ctx.callbackQuery.message.editText("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", {
    reply_markup: menuKeyboard,
  });
  await ctx.answerCallbackQuery("–ì–∏—Ç–ª–µ—Ä –ø—Ä–∞–≤");
});
// –û—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã  (–ú–µ–Ω—é Support and Status)
// ------------------------ //

// ------------------------ //
//–û—Ç–≤–µ—Ç—ã –Ω–∞ –æ—à–∏–±–∫–∏ —á—Ç–æ–±—ã –Ω–µ –∫—Ä–∞—à–∏–ª—Å—è –±–æ—Ç
bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error white handling update ${ctx.update.update_id}`);
  const e = err.error;

  if (e instanceof GrammyError) {
    console.error("Error in request", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram:", e);
  } else {
    console.error("Unknown error:", e);
  }
});
//–û—Ç–≤–µ—Ç—ã –Ω–∞ –æ—à–∏–±–∫–∏ —á—Ç–æ–±—ã –Ω–µ –∫—Ä–∞—à–∏–ª—Å—è –±–æ—Ç
// ------------------------ //

bot.start();
